# -*- coding: utf-8 -*-
"""LAB1_170042008.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B018XvFqIQyBhbVQ7rlu4YV3-afyCa-f

# LAB 1

#### TASK: Observation of Taylor's Method

At first we have to import the required libraries.
"""

from sympy import *
from mpmath import *
import numpy as np
import matplotlib.pyplot as plt

"""Now we will find out the actual value of the given equation for the value X=2.1"""

x = Symbol('x')
n=1
a=[]
eq_prime=x**6+x**5+3*x**3+2*x**2+x+3
eq1=lambdify(x,eq_prime)
actual=eq1(2.1)
print(actual)

"""Now we will find out the value of different derivatives of the given equation for the known value of 2 and store them in a List."""

while n<7:
  eq1=lambdify(x,eq_prime)

  a.append(eq1(2))
  eq_prime=eq_prime.diff(x)
  n=n+1
print(a)

"""Now we will find out the percentage of error of the value calculated using the Tyler's theorem for each iteration and store in another List."""

i=0
j=1
final=0
h=.1
error=[]
e=0
while j<6:
  while i<j:
    final=final+(a[i]*(h**i))/fac(i)
    i=i+1
  print(final)
  e=((actual-final)/actual)*100
  error.append(e)
  j=j+1
print(error)
er=np.array(error)

"""Now we will plot the percantage of error against the number of iteration required to get that value."""

plt.plot([1,2,3,4,5],er,'o-')
plt.subplot().set(xlabel='Number of iterations',ylabel='Percantage of error',
       title='')
plt.show()

"""**Observation:** From the graph we can see that for the first iteration the percentage of error is high which is approximately *21%*. For 2nd iteration that is *2%* and for 3rd, 4th iteration the percentage of error is *0.123%* and *0.00424%* respectively. For the 5th iteration the error is significantly low.

**Conclusion:** The value obtained using the Taylor's Method tends to be more accurate with more number of derivatives of the actual equation.
"""